<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode179 最大数</title>
    <url>/2020/07/12/LeetCode-179-%E6%9C%80%E5%A4%A7%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/largest-number/" target="_blank" rel="noopener">题目原链接</a></p>
<p>题目大意是给出一个数组，里面包含一系列数字，你的任务是将这些数字组合成一个最大数，然后这个数字可能会很大，需要以字符串的形式给出。</p>
<hr>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>基本方向就是<strong>按一定的顺序将数组中的数字进行排序</strong>，然后依次按顺序取出数字组合成一个最大数，而这个<strong>一定的顺序</strong>，就是这道题的关键。<br>先来看一下一般情况 ：最高位数值不一次的数字：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">112</span></span><br><span class="line"><span class="number">234</span></span><br><span class="line"><span class="number">223</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>显而易见，对于这类数字，我们只需要<strong>按其当前最高位的大小(如果最高位大小相同，则按次高位的大小，依次类推)</strong>来排序就行。</p>
<p>那么，如果最高位或者接下来几位都相同呢？</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="number">824</span></span><br><span class="line"><span class="number">8248</span></span><br><span class="line"><span class="number">8246</span></span><br><span class="line"><span class="number">8248241</span></span><br><span class="line"><span class="number">8248249</span></span><br></pre></td></tr></table></figure>

<p>是不是没那么容易看出来了？对于这些情况，最简单直接粗暴的做法，就是每个数字都彼此组合一遍，然后再比较一下谁大谁小，依此来排序，但是效率有点低。</p>
<p>让我们先来看看两组数字，找找规律，看看有没什么特殊性质利用一下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case 1				case 2</span><br><span class="line"> 824				 824</span><br><span class="line"> 8246				 8248</span><br><span class="line">   |      		         | </span><br><span class="line"> 8248246			 8248248</span><br><span class="line"> 8246824			 8248824</span><br></pre></td></tr></table></figure>

<p>case1和case2组成的最大数分别是<strong>8248246</strong>和<strong>8248824</strong>，两组数字都有点类似，就是最高位乃至后面几位都和另外一组数字相同。按照一般case的对比规则，对于case1，我们最终比较的结果就是， 824和8246在比较完数字<strong>4</strong>之后，数字<strong>6</strong>无数可比，那么<strong>6</strong>应该和谁比呢？</p>
<p>我们来这样想一下，如果我觉得<strong>824</strong>应该要排在<strong>8246</strong>前面，是不是以<strong>824</strong>开头的最大数<strong>824X</strong>要比以<strong>8246</strong>开头的最大数<strong>8246</strong>要大呢？反过来如果是<strong>8246</strong>要排在前面，那么一定是<strong>8246</strong>比<strong>824X</strong>大。那么如何决定这个X是什么呢？</p>
<p>答案就是<strong>滑动窗口</strong>。当<strong>824</strong>和<strong>8246</strong>比较完数字<strong>4</strong>之后，应该将<strong>8246</strong>中和<strong>824</strong>中相同的部分滑动去掉，将<strong>6</strong>当作新数字中的最高位：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">--<span class="number">-824</span></span><br><span class="line">--<span class="number">-8246</span></span><br><span class="line">||</span><br><span class="line">--<span class="number">-824</span></span><br><span class="line"><span class="number">8246</span></span><br></pre></td></tr></table></figure>

<p>为什么是滑动窗口呢？因为当<strong>824</strong>遍历完之后，这个时候就需要进行<strong>谁是第四个及后续数字</strong>的判断。这需要拿数字比较多(<strong>8246</strong>)的那一组数字中剩余还没有比较的数字(数字<strong>6</strong>)，去和前面已经比较过的数字(<strong>824</strong>)进行比较，毕竟对于新的最大数开头那部分<strong>824X</strong>，X的值有可能是<strong>6</strong>(8246排前面)，或者是<strong>8</strong>(824排前面)。</p>
<p>那么根据前面的规律，将相同部分的数字滑动掉之后，又可以继续用normal case的规则去进行比较了，直到找到谁大谁小即可。</p>
<hr>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">LargestNumber</span>(<span class="params"><span class="keyword">int</span>[] nums</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Array.Sort(nums, Sort);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (nums[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">string</span> numStr = <span class="keyword">string</span>.Empty;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.Length; ++i)</span><br><span class="line">           &#123;</span><br><span class="line">               List&lt;<span class="keyword">int</span>&gt; numList = GetNumsSet(nums[i]);</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> j = numList.Count - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">               &#123;</span><br><span class="line">                   numStr = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;&#123;1&#125;"</span>, numStr, numList[j]);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> numStr;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> List&lt;<span class="keyword">int</span>&gt; <span class="title">GetNumsSet</span>(<span class="params"><span class="keyword">int</span> num</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           List&lt;<span class="keyword">int</span>&gt; lNumsList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>);</span><br><span class="line">           <span class="keyword">if</span> (num &gt;= <span class="number">10</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">int</span> lq = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">int</span> lr = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">do</span></span><br><span class="line">               &#123;</span><br><span class="line">                   lq = num / <span class="number">10</span>;</span><br><span class="line">                   lr = num % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">                   lNumsList.Add(lr);</span><br><span class="line">                   num = lq;</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">while</span> (lq &gt; <span class="number">0</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               lNumsList.Add(num);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> lNumsList;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">CompareRecusive</span>(<span class="params">List&lt;<span class="keyword">int</span>&gt; lList, List&lt;<span class="keyword">int</span>&gt; rList</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">int</span> iResult = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">int</span> lIdx = lList.Count - <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">int</span> rIdx = rList.Count - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// normal case 从最高位依次比较下去</span></span><br><span class="line">           <span class="keyword">while</span> (lIdx &gt;= <span class="number">0</span> &amp;&amp; rIdx &gt;= <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">int</span> lValue = lList[lIdx];</span><br><span class="line">               <span class="keyword">int</span> rValue = rList[rIdx];</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (lValue == rValue)</span><br><span class="line">               &#123;</span><br><span class="line">                   iResult = <span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                   iResult = lValue &gt; rValue ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               lIdx--;</span><br><span class="line">               rIdx--;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> ( iResult == <span class="number">0</span> )</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//右边的数字多一些</span></span><br><span class="line">               <span class="keyword">if</span> (lList.Count &lt; rList.Count &amp;&amp; rIdx &gt;= <span class="number">0</span> )</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="comment">//将右边的数字滑动，对齐左边的数字</span></span><br><span class="line">                   <span class="keyword">var</span> newRList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = rIdx; i &gt;= <span class="number">0</span> ; --i)</span><br><span class="line">                   &#123;</span><br><span class="line">                       newRList.Insert(<span class="number">0</span>,rList[i]);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//滑动之后就可以采用normal case的比较方法了</span></span><br><span class="line">                   iResult = CompareRecusive(lList, newRList);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span>( lIdx &gt;= <span class="number">0</span> )</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="comment">//左边的数字多一些，滑动左边的数字，以对齐右边的数字</span></span><br><span class="line">                   <span class="keyword">var</span> newLList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = lIdx; i &gt;=  <span class="number">0</span> ; --i)</span><br><span class="line">                   &#123;</span><br><span class="line">                       newLList.Insert(<span class="number">0</span>,lList[i]);</span><br><span class="line">                   &#125;</span><br><span class="line">                   </span><br><span class="line">                   <span class="comment">//滑动之后就可以采用normal case的比较方法了</span></span><br><span class="line">                   iResult = CompareRecusive(newLList, rList);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> iResult;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span> l, <span class="keyword">int</span> r</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">if</span> (l == r)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               List&lt;<span class="keyword">int</span>&gt; lList = GetNumsSet(l);</span><br><span class="line">               List&lt;<span class="keyword">int</span>&gt; rList = GetNumsSet(r);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> CompareRecusive(lList, rList);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h2 id="解题结果"><a href="#解题结果" class="headerlink" title="解题结果"></a>解题结果</h2><p><img src="https://raw.githubusercontent.com/Seed-XL/ArticlePicture/master/20200713003552.png" alt="result"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode162 寻找峰值</title>
    <url>/2020/05/17/LeetCode-164-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/find-peak-element/" target="_blank" rel="noopener">题目原链接</a></p>
<p>题目大意就是给出一个数组，然后寻找其中的一个峰值的下标索引。这里有一个值得注意的地方是，数组边界nums[0]和nums[n-1]也是可能成为峰值的，因为默认nums[-1]和nums[n]是无穷小。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="寻找线索"><a href="#寻找线索" class="headerlink" title="寻找线索"></a>寻找线索</h3><p>先来分析一下题目，看看有没有什么线索可用。峰值，顾名思义，就是其值大于左右两侧的值，那么判断一个值，<strong>最少需要3个数(暂不考虑特例)</strong>。</p>
<h3 id="确定算法"><a href="#确定算法" class="headerlink" title="确定算法"></a>确定算法</h3><p>由于题目给出的说明：解法的时间复杂度应该是<strong>O(logN)</strong>，结合前面的性质，我想到的是：<strong>分治法</strong>。</p>
<p>顺着思路走，下一步就是该如何分解问题，来到这道题，对应的就是<strong>如何划分数组</strong>，为了简单起见，我每次将数组进行1/2划分。那么结合递归的写法，需要确定算法的<strong>递归条件</strong>和<strong>基线条件</strong>。</p>
<p>根据前面提到的数组切分，可以这样做，<strong>当子数组的长度大于3的时候，就将数组进行1/2划分</strong>，缩小问题的规模，这个是数组的递归条件。</p>
<p>根据前面提到的性质 ，算法的基线条件就是<strong>当子数组的长度小于或等于3</strong>的时候。小于3直接就返回，这种情况不存在峰值。等于3，尝试在其中的子数组找出峰值，并返回结果。</p>
<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><p>但是这里有一个特例的情况，请看下面这个case:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">1,3,2,1</span>]</span><br></pre></td></tr></table></figure>

<p>如果单纯是按照在子数组中寻找峰值的话，最终算法会找不到峰值。因为它并没有考虑，<strong>组成峰值的3个数有可能是跨越两个子数组</strong>，因此需要处理左子数组和右子数组都合并起来的情况。根据峰值的性质，就算两个子数组合并，峰值也只会出现在两个子数组合并的边界，因此只需要简单地比较一下合并边界的值，即可判断是否存在峰值。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindPeakElement</span>(<span class="params"><span class="keyword">int</span>[] nums</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//特例，就是峰值是第一个元素和最后一个元素的情况</span></span><br><span class="line">        <span class="keyword">if</span>(  nums.Length &lt;= <span class="number">1</span> || nums[<span class="number">0</span>] &gt; nums[<span class="number">1</span>]  )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( nums[nums.Length<span class="number">-1</span>] &gt; nums[nums.Length<span class="number">-2</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.Length - <span class="number">1</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> FindPeekValue(nums,<span class="number">0</span>,(nums.Length + <span class="number">0</span>) &gt;&gt; <span class="number">1</span>, nums.Length<span class="number">-1</span>)  ; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">FindPeekValue</span>(<span class="params"> <span class="keyword">int</span>[] nums,<span class="keyword">int</span> s ,<span class="keyword">int</span> m, <span class="keyword">int</span> e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = e + <span class="number">1</span> - s   ;</span><br><span class="line">        <span class="keyword">if</span>( len &gt; <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//递归条件</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//左半子数组寻找</span></span><br><span class="line">            <span class="keyword">int</span> ret = FindPeekValue(nums,s,(m<span class="number">-1</span>+s) &gt;&gt; <span class="number">1</span>,m<span class="number">-1</span>) ;</span><br><span class="line">            <span class="keyword">if</span>( ret != <span class="number">-1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ret ; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右半子数组寻找</span></span><br><span class="line">            ret = FindPeekValue(nums,m,(e + m) &gt;&gt; <span class="number">1</span>,e)  ; </span><br><span class="line">            <span class="keyword">if</span>( ret != <span class="number">-1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ret; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//合并两段来找</span></span><br><span class="line">            <span class="comment">//峰值既可能在左子数组，又有可能在右子数组的情况 ，需要区分。</span></span><br><span class="line">            <span class="keyword">return</span> ( nums[m] &gt; nums[m<span class="number">-1</span>] &amp;&amp; nums[m] &gt; nums[m+<span class="number">1</span>] ) ? m </span><br><span class="line">            : ( nums[m<span class="number">-1</span>] &gt; nums[m<span class="number">-2</span>] &amp;&amp; nums[m<span class="number">-1</span>] &gt; nums[m] ? m<span class="number">-1</span> : <span class="number">-1</span> )  ; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( len == <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//基线条件 len == 3</span></span><br><span class="line">            <span class="keyword">return</span> ( nums[m] &gt; nums[m<span class="number">-1</span>] &amp;&amp; nums[m] &gt; nums[m+<span class="number">1</span>] ) ? m : <span class="number">-1</span>  ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基线条件 len &lt; 3</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解题结果"><a href="#解题结果" class="headerlink" title="解题结果"></a>解题结果</h2><p><img src="https://raw.githubusercontent.com/Seed-XL/ArticlePicture/master/20200713004326.png" alt="result"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
