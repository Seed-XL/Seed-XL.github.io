<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode64 最小路径和</title>
    <url>/2020/07/15/LeetCode-64-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">题目原链接</a></p>
<p>题目大意就是给出一个非负整数m x n的网络，找出从左上角到右下角，路径和为最小的数。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="暴力递归回溯"><a href="#暴力递归回溯" class="headerlink" title="暴力递归回溯"></a>暴力递归回溯</h3><p>对于这类题目，第一反应就是暴力递归回溯法，这种方法遍历所有可行的情况，然后找出最少的和，但是稍微分析一下的话，就知道时间复杂度是O(2^(m+n))，肯定会超时，所以不予考虑，代码实现比较简单，这里也不贴出来了。</p>
<blockquote>
<p>因为是从左上角到右下角，每次只能往下或者往右，那么无论怎么走，从左上角到右下角，都要进行<br>(m - 1) + (n-1)次选择（将行和列拆分来看，按行走，需要走m-1次，按列走，需要走n-1次)。而又因为每次进行选择的时候，都只能往下或者往右走，那每次选择都2种不同走向，于是就有：O(2^(m+n))，这就是所有可能的情况的数量。</p>
</blockquote>
<h3 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h3><p>然后最近刚好在看<a href="https://book.douban.com/subject/26979890/" target="_blank" rel="noopener">《算法图解》</a>的<strong>狄克斯特拉算法</strong>章节，刚好这道题抽象出来求的就是<strong>单源最短路径</strong>的问题，于是尝试用这个算法来解一下这道题，可惜在倒数第二个case超时了，看来时间复杂度还是过高了。</p>
<blockquote>
<p>将这个m x n的网格，看成是带非负加权的有向图，每个元素指向其右侧和下侧的元素，元素的侧代表的是相应的加权。那么求从左上角到右下角的最小和路径，求的就是从左上角到右下角的最短路径。而用Dijkstra算法的复杂度是O(n^2)，在这里就是O(m+n)。</p>
</blockquote>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[[1,3,1],[1,5,1],[4,2,1]]</span></span><br><span class="line"><span class="comment">[[1,2],[2,1]]</span></span><br><span class="line"><span class="comment">[[1,3,1,1],[1,5,1,6],[4,2,1,5]]</span></span><br><span class="line"><span class="comment">[[1]]</span></span><br><span class="line"><span class="comment">[[1,2,3,4]]</span></span><br><span class="line"><span class="comment">[[1],[2],[3],[1]]</span></span><br><span class="line"><span class="comment">[[0]]</span></span><br><span class="line"><span class="comment">[[0],[1],[3]]</span></span><br><span class="line"><span class="comment">[[0,0,0,0]]</span></span><br><span class="line"><span class="comment">[[0],[0],[0],[0]]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] graph;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rowMax = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> colMax = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">private</span> BitArray processedNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//index -&gt; cost</span></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; costDict;</span><br><span class="line">    <span class="comment">//index -&gt; index</span></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; parentDict;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MinPathSum</span>(<span class="params"><span class="keyword">int</span>[][] grid</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//todo boundary case  </span></span><br><span class="line"></span><br><span class="line">        graph = grid;  </span><br><span class="line"></span><br><span class="line">        rowMax = grid.Length;</span><br><span class="line">        <span class="keyword">if</span>( rowMax &gt; <span class="number">0</span>  )</span><br><span class="line">        &#123;</span><br><span class="line">            colMax = grid[<span class="number">0</span>].Length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( rowMax * colMax == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        processedNode = <span class="keyword">new</span> BitArray(rowMax * colMax);</span><br><span class="line">        costDict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">5</span>);</span><br><span class="line">        parentDict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; neighbors = <span class="keyword">new</span> List&lt;KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="keyword">new</span> KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//dir</span></span><br><span class="line">        KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; downDir = <span class="keyword">new</span> KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; rightDir = <span class="keyword">new</span> KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; neighbors.Count;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> neighborDir = neighbors[i]; </span><br><span class="line">            <span class="keyword">int</span> cost = GetNeighborCost(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">ref</span> neighborDir);</span><br><span class="line">            <span class="keyword">if</span> (cost &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> neighborIdx = GetIndex(neighborDir.Key, neighborDir.Value);</span><br><span class="line">                SetOrAddCost(neighborIdx ,cost) ;</span><br><span class="line">                SetParent(GetIndex(<span class="number">0</span>, <span class="number">0</span>),neighborIdx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//SetOrAddCost(GetIndex(rowMax - 1, colMax - 1), int.MaxValue); </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> leastCost = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> leastCostNodeIdx = FindLostCostNode(<span class="keyword">out</span> leastCost); </span><br><span class="line">        <span class="keyword">while</span> ( leastCostNodeIdx &gt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; neighbors.Count; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> neighborDir = neighbors[i];</span><br><span class="line">                <span class="keyword">int</span> neighborCost = GetNeighborCost(leastCostNodeIdx,<span class="keyword">ref</span> neighborDir);</span><br><span class="line">                <span class="keyword">if</span> ( neighborCost &gt;= <span class="number">0</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> neighborIdx = GetNeighborIdx(leastCostNodeIdx, <span class="keyword">ref</span> neighborDir); </span><br><span class="line">                    <span class="keyword">int</span> oldCost = <span class="number">-1</span>; </span><br><span class="line">                    <span class="keyword">int</span> newCost = leastCost + neighborCost;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">bool</span> isNewCost = !costDict.TryGetValue(neighborIdx, <span class="keyword">out</span> oldCost);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (  oldCost &gt; newCost )</span><br><span class="line">                    &#123;</span><br><span class="line">                        costDict[neighborIdx] = newCost;</span><br><span class="line">                        parentDict[neighborIdx] = leastCostNodeIdx;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>( isNewCost )</span><br><span class="line">                    &#123;</span><br><span class="line">                        costDict.Add(neighborIdx, newCost);</span><br><span class="line">                        parentDict[neighborIdx] = leastCostNodeIdx;  </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            processedNode.Set(leastCostNodeIdx, <span class="literal">true</span>);</span><br><span class="line">            leastCostNodeIdx = FindLostCostNode(<span class="keyword">out</span> leastCost);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pathSum = graph[<span class="number">0</span>][<span class="number">0</span>] ; </span><br><span class="line">        <span class="keyword">int</span> endCost = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">if</span>(costDict.TryGetValue(rowMax * colMax - <span class="number">1</span>,<span class="keyword">out</span> endCost))</span><br><span class="line">        &#123;</span><br><span class="line">            pathSum += endCost  ; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pathSum; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetIndex</span>(<span class="params"> <span class="keyword">int</span> x ,<span class="keyword">int</span> y </span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> colMax * x + y; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">ParseXY</span>(<span class="params"> <span class="keyword">int</span> index, <span class="keyword">out</span> <span class="keyword">int</span> x ,<span class="keyword">out</span> <span class="keyword">int</span> y </span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        x = <span class="number">-1</span>;</span><br><span class="line">        y = <span class="number">-1</span>; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( index &lt; <span class="number">0</span> || index &gt;= rowMax * colMax )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x = index / colMax;</span><br><span class="line">        y = index % colMax;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetOrAddCost</span>(<span class="params"><span class="keyword">int</span> index,<span class="keyword">int</span> cost</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; rowMax * colMax)</span><br><span class="line">        &#123;</span><br><span class="line">            costDict[index] = cost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetOrAddCost</span>(<span class="params"><span class="keyword">int</span> neighborX, <span class="keyword">int</span> neighborY, <span class="keyword">int</span> cost</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        SetOrAddCost(GetIndex(neighborX, neighborY), cost);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetParent</span>(<span class="params"> <span class="keyword">int</span> parentNodeIdx ,<span class="keyword">int</span> childNodeIdx </span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> maxIdx = rowMax * colMax;</span><br><span class="line">        <span class="keyword">if</span> (parentNodeIdx &lt; maxIdx &amp;&amp; childNodeIdx &lt; maxIdx)</span><br><span class="line">        &#123;</span><br><span class="line">            parentDict[childNodeIdx] = parentNodeIdx; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetNeighborIdx</span>(<span class="params"><span class="keyword">int</span> index, <span class="keyword">ref</span> KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dir</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ParseXY(index, <span class="keyword">out</span> x, <span class="keyword">out</span> y))</span><br><span class="line">        &#123;</span><br><span class="line">            x += dir.Key;</span><br><span class="line">            y += dir.Value;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> GetIndex(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetNeighborCost</span>(<span class="params"> <span class="keyword">int</span> index, <span class="keyword">ref</span> KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dir </span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">if</span>( ParseXY(index,<span class="keyword">out</span> x,<span class="keyword">out</span> y) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetNeighborCost(x, y, <span class="keyword">ref</span> dir); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetNeighborCost</span>(<span class="params"> <span class="keyword">int</span> x , <span class="keyword">int</span> y ,<span class="keyword">ref</span> KeyValuePair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dir</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> neighborRow = x + dir.Key;</span><br><span class="line">        <span class="keyword">int</span> neighborCol = y + dir.Value;</span><br><span class="line">        <span class="keyword">if</span> (neighborRow &lt; rowMax &amp;&amp; neighborCol &lt; colMax)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> graph[neighborRow][neighborCol];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">FindLostCostNode</span>(<span class="params"> <span class="keyword">out</span> <span class="keyword">int</span> leastCost </span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">-1</span>; </span><br><span class="line">        leastCost = <span class="keyword">int</span>.MaxValue ; </span><br><span class="line">        <span class="keyword">var</span> etr = costDict.GetEnumerator(); </span><br><span class="line">        <span class="keyword">while</span> (etr.MoveNext())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> nodeIdx = etr.Current.Key;</span><br><span class="line">            <span class="keyword">var</span> nodeCost = etr.Current.Value;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( processedNode[nodeIdx] || nodeCost &gt; leastCost )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            leastCost = nodeCost;</span><br><span class="line">            index = nodeIdx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>鉴于用O(n^2)的算法也超时，那么基本就是要求用O(n)的算法来解了，结合题目求最值的走向，那么基本上就是要用动态规划来解了。恰好那会刚好在看<a href="https://labuladong.github.io/ebook/" target="_blank" rel="noopener"> labuladong的算法小抄</a>中关于动态规划的相关章节（写的非常通俗易懂），其中的内容提供了对应的思路，于是稍加分析之后就解出来了。</p>
<h4 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h4><p>来看看题目，求左上角到右下角的最小路径和，那么是不是在求左下角向右或者向下走两条路径中的最小值呢？假如向右走是最小的，那么向右走了之后，再来走下一步，是不是一样在求向右或者向下走两条路径中的最小值呢？于是递归就产生了，不管我们怎么走，走的都是最小路径和的那一条路，于是可以得到：</p>
<blockquote>
<p>dp[x,y] =  {<br>                           Min( dp[x+1,y] , dp[x,y+1])   |   graph[x+1,y]  != null  &amp;&amp;  graph[x,y+1]  != null<br>                           dp[x+1,y]                              |   graph[x+1,y]  != null  &amp;&amp;  graph[x,y+1]  == null<br>                           dp[x,y+1]                              |   graph[x+1,y]  == null  &amp;&amp; graph[x,y+1]  != null<br>                }</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Seed-XL/ArticlePicture/master/20200720003640.png" alt="推导公式"></p>
<h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [[1,3,1],[1,5,1],[4,2,1]]</span></span><br><span class="line"><span class="comment">    [[1,2],[2,1]]</span></span><br><span class="line"><span class="comment">    [[1,3,1,1],[1,5,1,6],[4,2,1,5]]</span></span><br><span class="line"><span class="comment">    [[1]]</span></span><br><span class="line"><span class="comment">    [[1,2,3,4]]</span></span><br><span class="line"><span class="comment">    [[1],[2],[3],[1]]</span></span><br><span class="line"><span class="comment">    [[0]]</span></span><br><span class="line"><span class="comment">    [[0],[1],[3]]</span></span><br><span class="line"><span class="comment">    [[0,0,0,0]]</span></span><br><span class="line"><span class="comment">    [[0],[0],[0],[0]]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] graph;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rowMax;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> colMax;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BitArray processedNode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] gridTable; </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MinPathSum</span>(<span class="params"><span class="keyword">int</span>[][] grid</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//todo boundary case  </span></span><br><span class="line">        rowMax = grid.Length;</span><br><span class="line">        <span class="keyword">if</span> (rowMax &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            colMax = grid[<span class="number">0</span>].Length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( rowMax * colMax == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        processedNode = <span class="keyword">new</span> BitArray(rowMax * colMax);</span><br><span class="line">        gridTable = <span class="keyword">new</span> <span class="keyword">int</span>[rowMax * colMax];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> MiniPathSum(grid, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">MiniPathSum</span>(<span class="params"> <span class="keyword">int</span>[][] grid ,<span class="keyword">int</span> x ,<span class="keyword">int</span> y  </span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> tableIdx = GetIndex(x, y);</span><br><span class="line">        <span class="keyword">if</span> ( tableIdx &gt;= rowMax * colMax )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span> ; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> isCalced = processedNode[tableIdx]; </span><br><span class="line">        <span class="keyword">if</span>( isCalced )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> gridTable[tableIdx];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果向下走，最小值是多少？</span></span><br><span class="line">        <span class="keyword">int</span> dirSumPath = MiniPathSum(grid, x + <span class="number">1</span>, y);</span><br><span class="line">        <span class="comment">//如果向右走，最小值又是多少呢？</span></span><br><span class="line">        <span class="keyword">int</span> rightSumPath = MiniPathSum(grid, x, y + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> miniDirSum = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">if</span>( dirSumPath != <span class="number">-1</span> &amp;&amp; rightSumPath != <span class="number">-1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//求向下向右走，两者间的最小值</span></span><br><span class="line">            miniDirSum = Math.Min(dirSumPath, rightSumPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dirSumPath != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//向右走不了，那么最小值当然是向下走的路径的</span></span><br><span class="line">            miniDirSum = dirSumPath; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( rightSumPath != <span class="number">-1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//向下走不了，那么最小值当然是向右走的路径的。</span></span><br><span class="line">            miniDirSum = rightSumPath; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pathSum = grid[x][y] + miniDirSum;  </span><br><span class="line"></span><br><span class="line">        processedNode.Set(tableIdx, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//DP表记录数值，后续直接查表减少重复计算</span></span><br><span class="line">        gridTable[tableIdx] = pathSum;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pathSum; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetIndex</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> colMax * x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="解题结果"><a href="#解题结果" class="headerlink" title="解题结果"></a>解题结果</h5><p><img src="https://raw.githubusercontent.com/Seed-XL/ArticlePicture/master/20200720003938.png" alt="递归解法"></p>
<h4 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h4><p>再来看看动态规划的递归解法 ，我们是从左上角的视角出发一步步递归下去，直到查到终点再返回的，属于自顶向下的解法 。那么能不能站在右下角的视角出发，反过来算呢？当然是可以的，因为换成终点视角来看的话，就变成了求“到当前的结点之前的最小路径和”，于是有：</p>
<blockquote>
<p>dp[x,y] =  {<br>                           Min( dp[x-1,y] , dp[x,y-1])   |   graph[x-1,y]  != null  &amp;&amp;  graph[x,y-1]  != null<br>                           dp[x-1,y]                              |   graph[x-1,y]  != null  &amp;&amp;  graph[x,y-1]  == null<br>                           dp[x,y-1]                              |   graph[x-1,y]  == null  &amp;&amp; graph[x,y-1]  != null<br>                }</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Seed-XL/ArticlePicture/master/20200720011124.png" alt="状态转移公式"></p>
<h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [[1,3,1],[1,5,1],[4,2,1]]</span></span><br><span class="line"><span class="comment">    [[1,2],[2,1]]</span></span><br><span class="line"><span class="comment">    [[1,3,1,1],[1,5,1,6],[4,2,1,5]]</span></span><br><span class="line"><span class="comment">    [[1]]</span></span><br><span class="line"><span class="comment">    [[1,2,3,4]]</span></span><br><span class="line"><span class="comment">    [[1],[2],[3],[1]]</span></span><br><span class="line"><span class="comment">    [[0]]</span></span><br><span class="line"><span class="comment">    [[0],[1],[3]]</span></span><br><span class="line"><span class="comment">    [[0,0,0,0]]</span></span><br><span class="line"><span class="comment">    [[0],[0],[0],[0]]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rowMax;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> colMax;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BitArray processedNode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] gridTable; </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MinPathSum</span>(<span class="params"><span class="keyword">int</span>[][] grid</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//todo boundary case  </span></span><br><span class="line">        rowMax = grid.Length;</span><br><span class="line">        <span class="keyword">if</span> (rowMax &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            colMax = grid[<span class="number">0</span>].Length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( rowMax * colMax == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        processedNode = <span class="keyword">new</span> BitArray(rowMax * colMax);</span><br><span class="line">        gridTable = <span class="keyword">new</span> <span class="keyword">int</span>[rowMax * colMax];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxTableIdx = rowMax * colMax ; </span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; maxTableIdx ; ++i )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">-1</span> ; </span><br><span class="line">            <span class="keyword">int</span> y = <span class="number">-1</span> ;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span>( ParseXY(i,<span class="keyword">out</span> x,<span class="keyword">out</span> y) )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> dx = x - <span class="number">1</span> ; </span><br><span class="line">                <span class="keyword">int</span> ry = y - <span class="number">1</span> ; </span><br><span class="line">                <span class="comment">//先查一下别人向下走到我这里，也就是我向上的最小路径和</span></span><br><span class="line">                <span class="keyword">int</span> downSum = GetDpTableSum(GetIndex(dx,y)) ; </span><br><span class="line">                <span class="comment">//再查一下别人向右走到我这里，也就是我向左的最小路径和</span></span><br><span class="line">                <span class="keyword">int</span> rightSum = GetDpTableSum(GetIndex(x,ry)) ;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> miniDirSum = <span class="number">0</span>  ; </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>( downSum != <span class="number">-1</span> &amp;&amp; rightSum != <span class="number">-1</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//两条路都可以走到我这里喔，选一个更加小的吧</span></span><br><span class="line">                    miniDirSum = Math.Min(downSum, rightSum);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(downSum != <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//别人不能向右走到我这里，但是可以向下走到我这里，那么你是最小的</span></span><br><span class="line">                    miniDirSum = downSum; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>( rightSum != <span class="number">-1</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//别人不能向下走到我这里，但是可以向右走到我这里，那么你是最小的</span></span><br><span class="line">                    miniDirSum = rightSum; </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//那么到我这个位置的最小值 ，就是 我当前的值 + 到我这里之前的最小值</span></span><br><span class="line">                gridTable[i] =  grid[x][y] + miniDirSum  ;    </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> gridTable[maxTableIdx<span class="number">-1</span>]  ; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetDpTableSum</span>(<span class="params"> <span class="keyword">int</span> index </span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span>( index &lt; <span class="number">0</span> || index &gt;= (colMax * rowMax) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span> ;              </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> gridTable[index] ; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetIndex</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> colMax * x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">ParseXY</span>(<span class="params"> <span class="keyword">int</span> index, <span class="keyword">out</span> <span class="keyword">int</span> x ,<span class="keyword">out</span> <span class="keyword">int</span> y </span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        x = <span class="number">-1</span>;</span><br><span class="line">        y = <span class="number">-1</span>; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( index &lt; <span class="number">0</span> || index &gt;= rowMax * colMax )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x = index / colMax;</span><br><span class="line">        y = index % colMax;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="解题结果-1"><a href="#解题结果-1" class="headerlink" title="解题结果"></a>解题结果</h5><p><img src="https://raw.githubusercontent.com/Seed-XL/ArticlePicture/master/20200720004235.png" alt="迭代解法"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode179 最大数</title>
    <url>/2020/07/12/LeetCode-179-%E6%9C%80%E5%A4%A7%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/largest-number/" target="_blank" rel="noopener">题目原链接</a></p>
<p>题目大意是给出一个数组，里面包含一系列数字，你的任务是将这些数字组合成一个最大数，然后这个数字可能会很大，需要以字符串的形式给出。</p>
<hr>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>基本方向就是<strong>按一定的顺序将数组中的数字进行排序</strong>，然后依次按顺序取出数字组合成一个最大数，而这个<strong>一定的顺序</strong>，就是这道题的关键。<br>先来看一下一般情况 ：最高位数值不一次的数字：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">112</span></span><br><span class="line"><span class="number">234</span></span><br><span class="line"><span class="number">223</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>显而易见，对于这类数字，我们只需要<strong>按其当前最高位的大小(如果最高位大小相同，则按次高位的大小，依次类推)</strong>来排序就行。</p>
<p>那么，如果最高位或者接下来几位都相同呢？</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="number">824</span></span><br><span class="line"><span class="number">8248</span></span><br><span class="line"><span class="number">8246</span></span><br><span class="line"><span class="number">8248241</span></span><br><span class="line"><span class="number">8248249</span></span><br></pre></td></tr></table></figure>

<p>是不是没那么容易看出来了？对于这些情况，最简单直接粗暴的做法，就是每个数字都彼此组合一遍，然后再比较一下谁大谁小，依此来排序，但是效率有点低。</p>
<p>让我们先来看看两组数字，找找规律，看看有没什么特殊性质利用一下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case 1				case 2</span><br><span class="line"> 824				 824</span><br><span class="line"> 8246				 8248</span><br><span class="line">   |      		         | </span><br><span class="line"> 8248246			 8248248</span><br><span class="line"> 8246824			 8248824</span><br></pre></td></tr></table></figure>

<p>case1和case2组成的最大数分别是<strong>8248246</strong>和<strong>8248824</strong>，两组数字都有点类似，就是最高位乃至后面几位都和另外一组数字相同。按照一般case的对比规则，对于case1，我们最终比较的结果就是， 824和8246在比较完数字<strong>4</strong>之后，数字<strong>6</strong>无数可比，那么<strong>6</strong>应该和谁比呢？</p>
<p>我们来这样想一下，如果我觉得<strong>824</strong>应该要排在<strong>8246</strong>前面，是不是以<strong>824</strong>开头的最大数<strong>824X</strong>要比以<strong>8246</strong>开头的最大数<strong>8246</strong>要大呢？反过来如果是<strong>8246</strong>要排在前面，那么一定是<strong>8246</strong>比<strong>824X</strong>大。那么如何决定这个X是什么呢？</p>
<p>答案就是<strong>滑动窗口</strong>。当<strong>824</strong>和<strong>8246</strong>比较完数字<strong>4</strong>之后，应该将<strong>8246</strong>中和<strong>824</strong>中相同的部分滑动去掉，将<strong>6</strong>当作新数字中的最高位：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">--<span class="number">-824</span></span><br><span class="line">--<span class="number">-8246</span></span><br><span class="line">||</span><br><span class="line">--<span class="number">-824</span></span><br><span class="line"><span class="number">8246</span></span><br></pre></td></tr></table></figure>

<p>为什么是滑动窗口呢？因为当<strong>824</strong>遍历完之后，这个时候就需要进行<strong>谁是第四个及后续数字</strong>的判断。这需要拿数字比较多(<strong>8246</strong>)的那一组数字中剩余还没有比较的数字(数字<strong>6</strong>)，去和前面已经比较过的数字(<strong>824</strong>)进行比较，毕竟对于新的最大数开头那部分<strong>824X</strong>，X的值有可能是<strong>6</strong>(8246排前面)，或者是<strong>8</strong>(824排前面)。</p>
<p>那么根据前面的规律，将相同部分的数字滑动掉之后，又可以继续用normal case的规则去进行比较了，直到找到谁大谁小即可。</p>
<hr>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">LargestNumber</span>(<span class="params"><span class="keyword">int</span>[] nums</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Array.Sort(nums, Sort);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (nums[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">string</span> numStr = <span class="keyword">string</span>.Empty;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.Length; ++i)</span><br><span class="line">           &#123;</span><br><span class="line">               List&lt;<span class="keyword">int</span>&gt; numList = GetNumsSet(nums[i]);</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> j = numList.Count - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">               &#123;</span><br><span class="line">                   numStr = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;&#123;1&#125;"</span>, numStr, numList[j]);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> numStr;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> List&lt;<span class="keyword">int</span>&gt; <span class="title">GetNumsSet</span>(<span class="params"><span class="keyword">int</span> num</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           List&lt;<span class="keyword">int</span>&gt; lNumsList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>);</span><br><span class="line">           <span class="keyword">if</span> (num &gt;= <span class="number">10</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">int</span> lq = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">int</span> lr = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">do</span></span><br><span class="line">               &#123;</span><br><span class="line">                   lq = num / <span class="number">10</span>;</span><br><span class="line">                   lr = num % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">                   lNumsList.Add(lr);</span><br><span class="line">                   num = lq;</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">while</span> (lq &gt; <span class="number">0</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               lNumsList.Add(num);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> lNumsList;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">CompareRecusive</span>(<span class="params">List&lt;<span class="keyword">int</span>&gt; lList, List&lt;<span class="keyword">int</span>&gt; rList</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">int</span> iResult = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">int</span> lIdx = lList.Count - <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">int</span> rIdx = rList.Count - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// normal case 从最高位依次比较下去</span></span><br><span class="line">           <span class="keyword">while</span> (lIdx &gt;= <span class="number">0</span> &amp;&amp; rIdx &gt;= <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">int</span> lValue = lList[lIdx];</span><br><span class="line">               <span class="keyword">int</span> rValue = rList[rIdx];</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (lValue == rValue)</span><br><span class="line">               &#123;</span><br><span class="line">                   iResult = <span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                   iResult = lValue &gt; rValue ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               lIdx--;</span><br><span class="line">               rIdx--;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> ( iResult == <span class="number">0</span> )</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//右边的数字多一些</span></span><br><span class="line">               <span class="keyword">if</span> (lList.Count &lt; rList.Count &amp;&amp; rIdx &gt;= <span class="number">0</span> )</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="comment">//将右边的数字滑动，对齐左边的数字</span></span><br><span class="line">                   <span class="keyword">var</span> newRList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = rIdx; i &gt;= <span class="number">0</span> ; --i)</span><br><span class="line">                   &#123;</span><br><span class="line">                       newRList.Insert(<span class="number">0</span>,rList[i]);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//滑动之后就可以采用normal case的比较方法了</span></span><br><span class="line">                   iResult = CompareRecusive(lList, newRList);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span>( lIdx &gt;= <span class="number">0</span> )</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="comment">//左边的数字多一些，滑动左边的数字，以对齐右边的数字</span></span><br><span class="line">                   <span class="keyword">var</span> newLList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = lIdx; i &gt;=  <span class="number">0</span> ; --i)</span><br><span class="line">                   &#123;</span><br><span class="line">                       newLList.Insert(<span class="number">0</span>,lList[i]);</span><br><span class="line">                   &#125;</span><br><span class="line">                   </span><br><span class="line">                   <span class="comment">//滑动之后就可以采用normal case的比较方法了</span></span><br><span class="line">                   iResult = CompareRecusive(newLList, rList);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> iResult;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span> l, <span class="keyword">int</span> r</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">if</span> (l == r)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               List&lt;<span class="keyword">int</span>&gt; lList = GetNumsSet(l);</span><br><span class="line">               List&lt;<span class="keyword">int</span>&gt; rList = GetNumsSet(r);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> CompareRecusive(lList, rList);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h2 id="解题结果"><a href="#解题结果" class="headerlink" title="解题结果"></a>解题结果</h2><p><img src="https://raw.githubusercontent.com/Seed-XL/ArticlePicture/master/20200713003552.png" alt="result"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode162 寻找峰值</title>
    <url>/2020/05/17/LeetCode-164-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/find-peak-element/" target="_blank" rel="noopener">题目原链接</a></p>
<p>题目大意就是给出一个数组，然后寻找其中的一个峰值的下标索引。这里有一个值得注意的地方是，数组边界nums[0]和nums[n-1]也是可能成为峰值的，因为默认nums[-1]和nums[n]是无穷小。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="寻找线索"><a href="#寻找线索" class="headerlink" title="寻找线索"></a>寻找线索</h3><p>先来分析一下题目，看看有没有什么线索可用。峰值，顾名思义，就是其值大于左右两侧的值，那么判断一个值，<strong>最少需要3个数(暂不考虑特例)</strong>。</p>
<h3 id="确定算法"><a href="#确定算法" class="headerlink" title="确定算法"></a>确定算法</h3><p>由于题目给出的说明：解法的时间复杂度应该是<strong>O(logN)</strong>，结合前面的性质，我想到的是：<strong>分治法</strong>。</p>
<p>顺着思路走，下一步就是该如何分解问题，来到这道题，对应的就是<strong>如何划分数组</strong>，为了简单起见，我每次将数组进行1/2划分。那么结合递归的写法，需要确定算法的<strong>递归条件</strong>和<strong>基线条件</strong>。</p>
<p>根据前面提到的数组切分，可以这样做，<strong>当子数组的长度大于3的时候，就将数组进行1/2划分</strong>，缩小问题的规模，这个是数组的递归条件。</p>
<p>根据前面提到的性质 ，算法的基线条件就是<strong>当子数组的长度小于或等于3</strong>的时候。小于3直接就返回，这种情况不存在峰值。等于3，尝试在其中的子数组找出峰值，并返回结果。</p>
<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><p>但是这里有一个特例的情况，请看下面这个case:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">1,3,2,1</span>]</span><br></pre></td></tr></table></figure>

<p>如果单纯是按照在子数组中寻找峰值的话，最终算法会找不到峰值。因为它并没有考虑，<strong>组成峰值的3个数有可能是跨越两个子数组</strong>，因此需要处理左子数组和右子数组都合并起来的情况。根据峰值的性质，就算两个子数组合并，峰值也只会出现在两个子数组合并的边界，因此只需要简单地比较一下合并边界的值，即可判断是否存在峰值。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindPeakElement</span>(<span class="params"><span class="keyword">int</span>[] nums</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//特例，就是峰值是第一个元素和最后一个元素的情况</span></span><br><span class="line">        <span class="keyword">if</span>(  nums.Length &lt;= <span class="number">1</span> || nums[<span class="number">0</span>] &gt; nums[<span class="number">1</span>]  )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( nums[nums.Length<span class="number">-1</span>] &gt; nums[nums.Length<span class="number">-2</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.Length - <span class="number">1</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> FindPeekValue(nums,<span class="number">0</span>,(nums.Length + <span class="number">0</span>) &gt;&gt; <span class="number">1</span>, nums.Length<span class="number">-1</span>)  ; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">FindPeekValue</span>(<span class="params"> <span class="keyword">int</span>[] nums,<span class="keyword">int</span> s ,<span class="keyword">int</span> m, <span class="keyword">int</span> e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = e + <span class="number">1</span> - s   ;</span><br><span class="line">        <span class="keyword">if</span>( len &gt; <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//递归条件</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//左半子数组寻找</span></span><br><span class="line">            <span class="keyword">int</span> ret = FindPeekValue(nums,s,(m<span class="number">-1</span>+s) &gt;&gt; <span class="number">1</span>,m<span class="number">-1</span>) ;</span><br><span class="line">            <span class="keyword">if</span>( ret != <span class="number">-1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ret ; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右半子数组寻找</span></span><br><span class="line">            ret = FindPeekValue(nums,m,(e + m) &gt;&gt; <span class="number">1</span>,e)  ; </span><br><span class="line">            <span class="keyword">if</span>( ret != <span class="number">-1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ret; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//合并两段来找</span></span><br><span class="line">            <span class="comment">//峰值既可能在左子数组，又有可能在右子数组的情况 ，需要区分。</span></span><br><span class="line">            <span class="keyword">return</span> ( nums[m] &gt; nums[m<span class="number">-1</span>] &amp;&amp; nums[m] &gt; nums[m+<span class="number">1</span>] ) ? m </span><br><span class="line">            : ( nums[m<span class="number">-1</span>] &gt; nums[m<span class="number">-2</span>] &amp;&amp; nums[m<span class="number">-1</span>] &gt; nums[m] ? m<span class="number">-1</span> : <span class="number">-1</span> )  ; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( len == <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//基线条件 len == 3</span></span><br><span class="line">            <span class="keyword">return</span> ( nums[m] &gt; nums[m<span class="number">-1</span>] &amp;&amp; nums[m] &gt; nums[m+<span class="number">1</span>] ) ? m : <span class="number">-1</span>  ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基线条件 len &lt; 3</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解题结果"><a href="#解题结果" class="headerlink" title="解题结果"></a>解题结果</h2><p><img src="https://raw.githubusercontent.com/Seed-XL/ArticlePicture/master/20200713004326.png" alt="result"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
